#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('NodeServer:server');
var http = require('http');
var util = require('util');
var os = require('os');

var config = require('../../config.json');
var sessionHandling = require('../sources/sessionHandling');

var Keymapping = require('../sources/Keymapping');

/**
 * Get port from environment and store in f.
 */

var port = normalizePort(process.env.PORT || config.runningPort);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(app.get('port'));
server.on('error', onError);
server.on('listening', onListening);

/**
 * INIT SESSION OWN HANDLING
 *
 * This starts the socket server and user management
 */

/**
 * Keymapping object for external controller
 */
console.log('keympapping hat funktioniert');

/**
 * Fetch Keymapping / Game / User from Database and cache it
 */
Keymapping.init(function (MAP) {
    util.log("finished MAP: ", MAP)
});

sessionHandling.init(server, {
    onNewUser: function (name) {
        //util.log('www | new user ' + name);
        sessionHandling.sendToFrontend_Message(name, 'userConnection', 'connected');
    },
    
    onUserDisconnects: function (name) {
        //util.log('www | user disconnected ' + name);
        sessionHandling.sendToFrontend_Message(name, 'userConnection', 'disconnected');
    },
    
    onMessage: function (name, type, message) {
        util.log('www | user ' + name + ' says: ' + message);

        console.log('onMessage hat funktioniert', app.get('selectedGame').namespace);

        if (app.get('selectedGame').namespace == 'external') {
            var key;

            if (Keymapping.HWSUPP && message.buttonName !== "btn-overlayMenu") {
                // TODO: Distinguish between button and sensorData
                // Anonymer Benutzer, dann nutze generisches Keymapping
                /**
                 * distinguish between buttons that will be handled by game internally or by 'hardwarebuttons' sent to Operating System (ioctl)
                 */

                if (name.indexOf("User_") === 0) { // AnonymUser (Beginnt mit "User_"
                    key = Keymapping.getDefaultHWKeyMapping(message.buttonName);

                } else { // UserAcc
                    // Wähle innerhalb des keymappingschema für jeweiligen user die passende taste des externen games
                    key = Keymapping.getKeyMappingByUserGame(app.get("selectedGame").uniqueName, name, message.buttonName);
                    util.log("GOT BUTTON: " + message.buttonName, key);
                }

                Keymapping.send_key_event(key, message.buttonState);
                sessionHandling.sendToFrontend_Message(name, type, message);
            }
            else {
                util.log("No HW Support, external games not possible");
                //TODO: Noty alertion
                sessionHandling.sendToFrontend_Message(name, type, message);
            }
        } else {
            sessionHandling.sendToFrontend_Message(name, type, message);
        }

    },
    
    onGameStarted: function () {
        console.log('onGamestarted hat funktioniert');
        var users = sessionHandling.getUserList();
        /*
         // TODO FIX IF CONDITION
         if (isGameExtOrInt){
         for (user in users) {
         var userName = user.userName;
         var gameID = app.get("selectedGame");
         if (os.platform() == 'linux') keyMapping[userName] = Keymapping.getDefaultHWKeyMapping(gameID, userName);
         }
         }
         */

    },

    onFrontendConnected: function () {
        //util.log('www | frontend connected ');
    },

    onFrontendOutboundMessage: function (type, data) {
        if (type == 'messageToClient') {
            sessionHandling.sendToUser(data.username, data.data.type, data.data.data);
        } else if (type == 'messageToAllClients') {
            sessionHandling.broadcastMessage(data.data);
        }
    },
    
    onFrontendOutboundData: function (request, data) {
        if (request == 'setControllerTemplate') {
            app.set('chosenControllerTemplate', data);
            util.log('www | frontend set controller template!');
        }
    }


}).start();
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
