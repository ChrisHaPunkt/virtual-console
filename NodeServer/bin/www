#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('NodeServer:server');
var http = require('http');
var userManagment = require('./sources/UserManagment.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5222');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(5222);
server.on('error', onError);
server.on('listening', onListening);

/**
 *
 * Initialize own Socket Server
 */

var network = require('./../sources/serverNetwork');
network.init(server, {
    onNewClient: function (id) {
        console.log('app.js | a user id ' + id + ' connected');
        network.broadcastMessage('A new user joined us! ID: ' + id);
        network.sendToClient(id, 'message', 'Your Client ID is: ' + id);
    },
    onLogin: function (id, username, password) {
        // TODO check user with authenticator module and return result
        return true;
    },
    onDisconnect: function (id) {
        console.log('app.js | a user id ' + id + ' disconnected');
        network.broadcastMessage('A user left us! ID: ' + id);
    },
    onMessage: function (id, data) {
        console.log('app.js | a user id ' + id + ' sended a message: ' + data);
        network.broadcastMessage('User ID ' + id + ': ' + data);
    }
}).start();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
